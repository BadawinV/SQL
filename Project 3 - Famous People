In this project, you’re going to make your own table with some small set of “famous people”, then make more tables about things they do and join those to create nice human readable lists.

For example, here are types of famous people and the questions your data could answer:

Movie stars: What movies are they in? Are they married to each other?
Singers: What songs did they write? Where are they from?
Authors: What books did they write?
Fictional characters: How are they related to other characters? What books do they show up in?


CREATE TABLE stars (id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    twitter TEXT,
    birthdate TEXT,
    following_id INTEGER);

INSERT INTO stars (first_name, last_name, twitter, birthdate, following_id)
    VALUES 
    ("Antonio", "Banderas", "@antoniobanderas", "1960-08-10", 5),
    ("Leonardo", "DiCaprio", "@LeoDiCaprio", "1974-11-11", 6),
    ("Adam", "Driver", "@AdamDriver83", "1983-11-19", 2),
    ("Joaquin", "Phoenix", "@JoPhoenix74", "1974-10-28", 2),
    ("Jonathan", "Pryce", "@Pryce47", "1947-06-01", 9),
    ("Tom", "Hanks", "@tomhanks", "1956-07-09", 4),
    ("Anthony", "Hopkins", "@ahopkins", "1937-12-31", 4),
    ("Al", "Pacino", "@alpacino", "1940-04-25", 10),
    ("Joe", "Pesci", "@pesci", "1943-02-09", 8),
    ("Brad", "Pitt", "@bradpitt", "1963-12-18", 7);


CREATE TABLE leading_role (id INTEGER PRIMARY KEY,
    stars_id INTEGER,
    movie TEXT,
    rate INTEGER);

INSERT INTO leading_role (stars_id, movie, rate)
    VALUES 
    (4, "Joker", 8.6),
    (3, "Marriage Story", 8.1),
    (2, "Once Upon a Time... in Hollywood", 7.8),
    (1, "Pain and Glory", 7.6),
    (5, "The Two Popes", 7.6);

CREATE TABLE supporting_role (id INTEGER PRIMARY KEY,
    stars_id INTEGER,
    movie TEXT,
    rate INTEGER);

INSERT INTO supporting_role (stars_id, movie, rate)
    VALUES 
    (9, "The Irishman", 8.0),
    (10, "Once Upon a Time... in Hollywood", 7.8),
    (6, "A Beautiful Day in the Neighborhood", 7.6),
    (8, "The Two Popes", 7.6);

-- cross join
SELECT * FROM leading_role, stars;

-- implicit inner join
SELECT * FROM leading_role lr, stars s
    WHERE lr.stars_id = s.id;
    
SELECT * FROM supporting_role sr, stars s
    WHERE sr.stars_id = s.id;
    
-- explicit inner join - JOIN
SELECT s.first_name, s.last_name, s.twitter, lr.movie, lr.rate 
    FROM stars s
        JOIN leading_role lr
        ON s.id = lr.stars_id
        WHERE rate > 7.8;

-- explicit INNER JOIN in decending order by rating
SELECT s.first_name, s.last_name, sr.movie, sr.rate 
    FROM stars s
        JOIN supporting_role sr
        ON s.id = sr.stars_id
        ORDER BY sr.rate DESC;

CREATE TABLE joint_projects (id INTEGER PRIMARY KEY,
    stars_id INTEGER,
    title TEXT);
    
INSERT INTO joint_projects (stars_id, title) VALUES 
    (2, "J.Edgar"),
    (3, "J.Edgar"),
    (1, "Evita"),
    (5, "Evita"),
    (3, "The Man Who Killed Don Quixote"),
    (5, "The Man Who Killed Don Quixote"),
    (2, "Catch Me If You Can"),
    (6, "Catch Me If You Can"),
    (1, "Philadelphia"),
    (6, "Philadelphia"),
    (1, "The Mask of Zorro"),
    (7, "The Mask of Zorro"),
    (10, "Legends of the Fall"),
    (7, "Legends of the Fall"),
    (10, "Meet Joe Black"),
    (7, "Meet Joe Black"),
    (5, "The Two Popes"),
    (7, "The Two Popes"),
    (8, "Misconduct"),
    (7, "Misconduct"),
    (8, "Once Upon a Time... in Hollywood"),
    (2, "Once Upon a Time... in Hollywood"),    
    (10, "Once Upon a Time... in Hollywood"),
    (8, "You Don't Know Jack"),
    (3, "You Don't Know Jack"),
    (8, "Glengarry Glen Ross"),
    (5, "Glengarry Glen Ross"),
    (8, "Ocean's Thirteen"),
    (10, "Ocean's Thirteen"),
    (9, "Man on Fire"),
    (5, "Man on Fire"),
    (1, "Interview with the Vampire"),
    (10, "Interview with the Vampire");

SELECT * FROM joint_projects;
   
-- Outer JOIN
SELECT s.first_name, s.last_name, jp.title
    FROM stars s
    LEFT OUTER JOIN joint_projects jp
    ON s.id = jp.stars_id;
    
SELECT id, first_name, last_name, following_id FROM stars;

-- Self JOIN
SELECT s.first_name, s.last_name, following.twitter
    FROM stars s
    JOIN stars following
    ON s.id = following.id;
    
CREATE TABLE project_pairs (id INTEGER PRIMARY KEY,
    project1_id INTEGER,
    project2_id INTEGER);

INSERT INTO project_pairs (project1_id, project2_id) VALUES
    (21, 29),
    (28, 24),
    (25, 2),
    (1, 7),
    (8, 10), 
    (9, 11),    
    (12, 18),
    (17, 30),
    (31, 4),
    (3, 32),
    (33, 15),
    (16, 14),
    (13, 23),
    (21, 26),
    (27, 17);
    
SELECT jp1.title title_1, jp2.title title_2 FROM project_pairs pp
    JOIN joint_projects jp1
    ON pp.project1_id = jp1.id
    JOIN joint_projects jp2
    ON pp.project2_id = jp2.id;
